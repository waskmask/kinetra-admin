<html lang="<%- __('lang') %>">
  <head>
    <link
      href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css"
      rel="stylesheet"
    />
    <%- include('partials/head', { title: __('inventory') }) %>
  </head>
  <body class="dash-body min-vh-100">
    <!-- Sidebar -->
    <%- include('partials/sidebar') %>

    <!-- Main content -->
    <main class="position-relative">
      <!-- Navbar -->
      <%- include('partials/navbar') %>
      <section class="page-titel px-mp mt-3 mb-4 w-100">
        <div class="p-title" style="font-size: 1.5rem">
          <%-__('inventory')%>
        </div>
      </section>

      <section class="content px-25 pb-5">
        <div class="container-fluid">
          <div class="row">
            <div class="col">
              <div class="card border-0">
                <div class="card-body p-4">
                  <h6><%-__('current_stock')%></h6>
                  <div id="inventoryTable"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>

      <!-- Footer -->
      <%- include('partials/footer') %>
    </main>

    <script>
      window.translations = {
        search: "<%-__('search')%>",
        next: "<%-__('next')%>",
        previous: "<%-__('previous')%>",
        showing: "<%-__('showing')%>",
        results: "<%-__('results')%>",
      };
    </script>
    <!-- javascript -->
    <script
      src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
      integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
      crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.5/dist/js/bootstrap.min.js"
      integrity="sha384-VQqxDN0EQCkWoxt/0vsQvZswzTHUVOImccYmSyhJTp7kGtPed0Qcx8rK9h9YEgx+"
      crossorigin="anonymous"
    ></script>
    <script src="/public/js/theme.js"></script>

    <script>
      function toAddNewProducts() {
        window.location.href = "/add-products";
      }
      document.addEventListener("DOMContentLoaded", () => {
        lucide.createIcons();
      });
    </script>

    <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>
    <script>
      const inventory = JSON.parse(
        decodeURIComponent(
          "<%- encodeURIComponent(JSON.stringify(inventories.data || [])) %>"
        )
      );

      new gridjs.Grid({
        columns: [
          {
            name: "<%- __('products') %>",
            id: "product_name",
            data: (row) => row[0],
            formatter: (cell, row) => {
              const product_id = row.cells[6].data;
              const name = cell.name;
              const grade = cell.grade;

              return gridjs.html(`
      <div class="text-start">
        <a target="_blank" href="/product/${product_id}" class="fw-bold">${name}</a>
        ${grade ? `<div class="text-muted small">${grade}</div>` : ""}
      </div>
    `);
            },
            attributes: () => ({
              class: "gridjs-td td text-start align-middle",
            }),
          },

          {
            name: "<%- __('stock_in') %>",
            id: "storage_name",
            data: (row) => row[1],
            formatter: (cell, row) => {
              const storage_id = row.cells[7].data; // storage_id from hidden column
              if (!storage_id) {
                console.warn("Missing storage_id:", row);
                return gridjs.html(`<span>${cell}</span>`);
              }
              return gridjs.html(
                `<a target="_blank" href="/storages/${storage_id}">${cell}</a>`
              );
            },
          },
          {
            name: "<%- __('quantity') %>",
            id: "quantity",
            data: (row) => row[2],
            formatter: (cell, row) => {
              const unit = row.cells[5].data; // unit_type from hidden column
              const formattedQty = new Intl.NumberFormat("en-US").format(cell);

              if (!unit) {
                console.warn("Missing unit_type:", row);
                return gridjs.html(`${formattedQty}`);
              }

              return gridjs.html(
                `${formattedQty}<span class="unit-sm"> ${unit}</span>`
              );
            },
          },
          {
            name: "<%- __('held') %>",
            id: "held_quantity",
            data: (row) => row[3],
            formatter: (cell, row) => {
              const unit = row.cells[5].data; // unit_type from hidden column
              if (!unit) {
                console.warn("Missing unit_type:", row);
                return gridjs.html(`${cell}`);
              }
              return gridjs.html(
                cell === 0
                  ? `<span class="text-muted">--</span>`
                  : `${cell}<span class="unit-sm"> ${unit}</span>`
              );
            },
          },
          {
            name: "<%- __('available') %>",
            id: "available_quantity",
            data: (row) => row[8], // available_quantity
            formatter: (cell, row) => {
              const unit = row.cells[5].data; // unit_type from hidden column
              if (!unit) {
                console.warn("Missing unit_type:", row);
                return gridjs.html(`${cell}`);
              }
              return gridjs.html(
                `${cell}<span class="unit-sm"> ${unit}</span>`
              );
            },
          },
          {
            name: "unit_type",
            id: "unit_type",
            data: (row) => row[4],
            hidden: true,
          },
          {
            name: "product_id",
            id: "product_id",
            data: (row) => row[5],
            hidden: true,
          },
          {
            name: "storage_id",
            id: "storage_id",
            data: (row) => row[6],
            hidden: true,
          },
          {
            name: "_id",
            id: "_id",
            data: (row) => row[7],
            hidden: true,
          },
          {
            name: "<%- __('logs') %>",
            id: "_id",
            data: (row) => row[7],
            formatter: (cell, row) => {
              const storageId = row.cells[7].data; // storage_id from hidden column
              if (!cell || !storageId) {
                console.warn("Missing _id or storageId:", {
                  _id: cell,
                  storageId,
                });
                return gridjs.html(`<span class="text-muted">N/A</span>`);
              }
              return gridjs.html(`
            <div class="mx-3 d-flex justify-content-end actn-btn">
              <a href="/inventory/logs/${storageId}/${cell}">
                <button class="btn btn-sm btn-ico btn-info">
                  <i class="bi bi-arrow-up-right"></i>
                </button>
              </a>
            </div>
          `);
            },
          },
        ],
        data: inventory.map((item, index) => {
          console.log(`Row ${index} data:`, {
            product_name: item.product_name,
            storage_name: item.storage_name,
            quantity: item.quantity,
            held_quantity: item.held_quantity,
            available_quantity: item.available_quantity,
            unit_type: item.unit_type,
            product_id: item.product_id,
            storage_id: item.storage_id,
            _id: item._id,
          });
          return [
            { name: item.product_name, grade: item.product_grade }, // 0
            item.storage_name, // 1
            item.quantity, // 2
            item.held_quantity, // 3
            item.unit_type, // 4
            item.product_id, // 5
            item.storage_id, // 6
            item._id, // 7
            item.available_quantity, // 8
          ];
        }),
        pagination: { limit: 10 },
        search: true,
        sort: true,
        className: {
          table: "table",
          th: "th",
          td: "td",
        },
        language: {
          search: { placeholder: "<%- __('search') %>" },
          pagination: {
            previous: "<%- __('previous') %>",
            next: "<%- __('next') %>",
            showing: "<%- __('showing') %>",
            results: () => "records",
          },
        },
      }).render(document.getElementById("inventoryTable"));
    </script>
  </body>
</html>
